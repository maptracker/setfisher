% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/supportFunctions.R
\name{strict.unique}
\alias{strict.unique}
\title{Strict Unique}
\usage{
strict.unique(x, token = "#")
}
\arguments{
\item{x}{Required, a character vector}

\item{token}{Default '#', the string that will go between the
original name and the numeric iterator. So if x had two entries
of "foo", using the default '#' would yields output values of
"foo#1" and "foo#2"}
}
\value{
A character vector where all values are unique, and all non-
unique names are altered
}
\description{
Like make.unique, but assure that non-unique names are ALL altered
}
\details{
code{make.unique} has the property of not altering the first
occurance of a non-unique member. That is, the list ('a','b','a')
will generate ('a', 'b', 'a.1'). When doing operations that presume
or require uniqueness, this is often undesirable. strict.unique
will force all non-unique values to be altered.

Unlike make.unique, iterative application of the function to the
elements vector will NOT create the same output as a single
application to the full vector. For its intended use this is not a
problem.
}
\examples{

fowl <-  c("duck", "duck", "goose")

## The first duck is not modified:
make.unique( fowl )

## All non-unique names will be altered:
strict.unique( fowl )

}
