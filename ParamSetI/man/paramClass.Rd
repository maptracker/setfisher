% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MethodsDocumentation.R
\name{paramClass}
\alias{paramClass}
\title{Parameter Class}
\arguments{
\item{key}{Required, one or more parameter names}

\item{val}{Default NULL. Optional character vector of new parameter
class restrictions}

\item{help}{Default FALSE. If TRUE, show this help and perform no
other actions.}
}
\value{
A named character vector of class restrictions, with names
    corresponding to keys
}
\description{
ParamSetI object method to get/set class restrictions of a parameter
}
\details{
\preformatted{
## Method Usage:
myObject$paramClass( help=TRUE )

myObject$paramClass( key, val=NULL )
}

Parameters can have optional class restrictions (storage modes, eg
'integer' or 'logical') assigned to them. These serve as sanity
checks when calling \link{param}; Unless \code{check.class} is set
to FALSE, \link{param} will refuse to set a mismatched parameter
value.

For setting large numbers of parameters, also consider
\link{defineParameters}, which can parse a class restriction from a
block of text, or \link{setParamList}, which can set parameters
from a list and provide \code{check.class} as dots to \link{param}.
}
\examples{

## This demo defines a toy object inheriting ParamSetI:
demo("exampleParamSetObject", package="ParamSetI", ask=FALSE)
pse <- ParamSetExample( params=list(inc=10L) )

# Get the class restriction for a parameter
pse$paramClass("inc")

# Set class restrictions for some new parameters
pse$paramClass(c("count", "isOnFire"),
               c("integer", "logical"))
# New class restrictions prevents illegal assignments
pse$param("isOnFire", "OMG YES")
pse$param("isOnFire", TRUE)

}
\seealso{
\link{defineParameters}, \link{showParameters}
}
