% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EventLogger.R
\docType{class}
\name{EventLogger-class}
\alias{EventLogger-class}
\alias{EventLogger}
\title{Event Logger}
\description{
Utility ReferenceClass object for messaging and recording of
events. Use \code{$message()} for general logging (stores event and
reports to console), see Methods section for variants.
}
\details{
A $show() method has been set, so simply evaluating an EventLogger
object on the command line will pretty-print the result. The
data.table holding the log information can be directly accessed
in field $log.
}
\section{Fields}{

\describe{
\item{\code{log}}{A list object holding the data.table which records the
log messages}
}}

\section{Methods}{

\describe{
\item{\code{actionMessage(msg = "No message provided!!", prefix = "[+]",
  color = "red", ...)}}{\preformatted{Calls message with a '[+]' prefix and red coloring
}}

\item{\code{colMap(color, bg = FALSE)}}{\preformatted{Picks the appropriate crayon color for a color name
    color - The name (string) of the color, *or* a function reference
       bg - Default FALSE. If TRUE, then the method will return the relevant
            background color method
}}

\item{\code{colorize(msg = "", color = NULL, bgcolor = NULL)}}{\preformatted{Colorize a string with crayon. Parameters:
      msg - The string to colorize
    color - The color (eg 'red') to assign to the text
  bgcolor - The color to assign to the background
}}

\item{\code{dateMessage(msg = "No message provided!", ...)}}{\preformatted{Calls message() with datestamp=TRUE
}}

\item{\code{debugMessage(msg = "No message provided!!", prefix = "[DEBUG]",
  color = "white", bgcolor = "blue", ...)}}{\preformatted{Calls message with a '[DEBUG]' prefix and white/blue coloring
}}

\item{\code{err(msg = "No message provided!!", prefix = "[ERROR]", ...)}}{\preformatted{Calls message with an '[ERROR]' prefix and red/yellow coloring
}}

\item{\code{message(msg = "No message provided!", prefix = NULL, color = NULL,
  bgcolor = NULL, datestamp = FALSE, fatal = FALSE, collapse = " ")}}{\preformatted{Display an optionally colorized message, and store
it in the log table. Parameters:
      msg - The text to display and show
   prefix - Optional text to display in front of message.
            Will not be recorded in the log.
    color - Foreground (text) color of message, not logged.
  bgcolor - Background color of message, not logged.
datestamp - If TRUE, then a datestamp will be displayed as well.
            The stamp will not be recorded with the log message; The
            $log data.table includes a 'Date' column.
    fatal - If TRUE, then stop() execution as well.
 collapse - Default '', text to use when collapsing msg vector.
}}

\item{\code{showLog(width = 0.7 * getOption("width"), relative = TRUE, pad = 11,
  n = 0)}}{Pretty-prints the log, including total elapsed time}

\item{\code{tidyTime(x = NULL, pad = 0)}}{Reports a time interval with unit management and colorization based on overall elapsed time}

\item{\code{useColor(newval = NULL)}}{\preformatted{Get/Set flag to use color or not. Parameters:
   newval - Optional new value. Should be logical or as.logical()-able.
}}
}}

\examples{

log <- EventLogger()
log$message("Did something important")
Sys.sleep(3)
log$actionMessage("Something emphatic has happened")
Sys.sleep(1)
log$dateMessage("Here's a date stamp")
log$debugMessage("Remember to comment this out in production")

# Pretty print the log, including an elapsed time:
log
# Expose the underlying data.table:
log$log$log # Everyone loves it

# Have this class inherited by another RefClass object:

## Create a simple RefClass object that inherits (contains) EventLogger:
foo <- setRefClass("foo",
  fields = list( x = 'numeric' ), contains = c("EventLogger"))

## Set the foo-Class methods:
foo$methods(
    initialize = function( x=1, ... ) {
        initFields(x=x)
        callSuper(...)
    },
    set_x = function( val ) {
        x <<- val
        actionMessage(c("Set x:", val))
    },
    del_x = function() {
        x <<- as.numeric(NA)
        ## Note that this is NOT base::message(), but the RC object version:
        message("Cleared x", color='magenta', prefix='[-]')
    })

## Create a new method and manipulate it
z <- foo()
z$set_x(10)
z$set_x(3.14)
z$del_x()

## Show the log:
z$log$log

}
