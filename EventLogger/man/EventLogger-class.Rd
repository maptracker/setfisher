% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EventLogger.R
\docType{class}
\name{EventLogger-class}
\alias{EventLogger-class}
\alias{EventLogger}
\title{Event Logger}
\description{
Utility ReferenceClass object for messaging and recording of
events. Use \code{$message()} for general logging (stores event and
reports to console), see Methods section for variants.
}
\details{
A $show() method has been set, so simply evaluating an EventLogger
object on the command line will pretty-print the result. The
data.table holding the log information can be directly accessed
in field $log.
}
\section{Fields}{

\describe{
\item{\code{log}}{The data.table holding log messages}

\item{\code{useCol}}{Logical flag to indicate if color should be used in
messaging}

\item{\code{vb}}{Logical flag indicating if verbose messaging should be
active}

\item{\code{colMap}}{An internally generated list that maps color names to
crayon functions}
}}

\section{Methods}{

\describe{
\item{\code{actionMessage(msg = "No message provided!!", prefix = "[+]",
  color = "red", ...)}}{Calls message with a '[+]' prefix and red coloring}

\item{\code{colNameToFunc()}}{Internal utility, generates list-of-lists that maps color names to crayon functions}

\item{\code{colorize(msg = "", color = NULL, bgcolor = NULL)}}{\preformatted{Colorize a string with crayon. Parameters:
      msg - The string to colorize
    color - The color (eg 'red') to assign to the text
  bgcolor - The color to assign to the background
}}

\item{\code{colorMap(color, bg = FALSE)}}{\preformatted{Picks the appropriate crayon color for a color name
    color - The name (string) of the color, *or* a function reference
       bg - Default FALSE. If TRUE, then the method will return the relevant
            background color method
}}

\item{\code{dateMessage(msg = "No message provided!", ...)}}{Calls message() with datestamp=TRUE}

\item{\code{debugMessage(msg = "No message provided!!", prefix = "[DEBUG]",
  color = "white", bgcolor = "blue", ...)}}{Calls message with a '[DEBUG]' prefix and white/blue coloring}

\item{\code{err(msg = "No message provided!!", prefix = "[ERROR]", ...)}}{Calls message with an '[ERROR]' prefix and red/yellow coloring}

\item{\code{initialize(useColor = NULL, verbose = NULL, log = NULL, ...)}}{\preformatted{Create a new object using EventLogger():
        log - Optional EventLogger object. This is used if EventLogger is an
              inherited ('contains') class in another RefClass object, and you
              wish that object to share the event log from a previously created
              object.
   useColor - Defaults to TRUE, toggles if crayon::-based coloring is applied
              to printed messages. If 'log' is provided, changes will affect
              that shared object
    verbose - Defaults to TRUE, toggles if log events are also printed to the
              terminal. If 'log' is provided, changes will affect that shared
              object
}}

\item{\code{logText(width = 0.7 * getOption("width"), relative = TRUE, pad = 11,
  n = 0)}}{\preformatted{Format the log data to show events and elapsed times
    width - Default 70% of the 'widht' option. The length to be used when
            strwrap()ing the event text
 relative - Default TRUE, will show the time elapsed between events. If
            FALSE will show absolute time stamps
      pad - Default 11, character padding
        n - Default 0, if greater will only show that number of most
            recent events
}}

\item{\code{message(msg = "No message provided!", prefix = NULL, color = NULL,
  bgcolor = NULL, datestamp = FALSE, fatal = FALSE, collapse = " ")}}{\preformatted{Display an optionally colorized message, and store
it in the log table. Parameters:
      msg - The text to display and show
   prefix - Optional text to display in front of message.
            Will not be recorded in the log.
    color - Foreground (text) color of message, not logged.
  bgcolor - Background color of message, not logged.
datestamp - If TRUE, then a datestamp will be displayed as well.
            The stamp will not be recorded with the log message; The
            $log data.table includes a 'Date' column.
    fatal - If TRUE, then stop() execution as well.
 collapse - Default '', text to use when collapsing msg vector.
}}

\item{\code{tidyTime(x = NULL, pad = 0)}}{\preformatted{Reports a time interval with unit management and colorization based on overall elapsed time
        x - The time unit to be tidied, in seconds
      pad - Default 0, a minimum width that the final string should occupy
}}

\item{\code{useColor(newval = NULL)}}{\preformatted{Get/Set flag to use color or not. Parameters:
   newval - Optional new value. Should be logical or as.logical()-able.

     Current value is returned invisibly
}}

\item{\code{verbose(newval = NULL)}}{\preformatted{Get/Set flag for messaging to be verbose or not. Parameters:
   newval - Optional new value. Should be logical or as.logical()-able.

     Current value is returned invisibly
}}
}}

\examples{

myEL <- EventLogger()
myEL$message("Did something important")
Sys.sleep(3)
myEL$actionMessage("Something emphatic has happened")
Sys.sleep(1)
myEL$dateMessage("Here's a date stamp")
myEL$debugMessage("Remember to comment this out in production")

# Pretty print the log, including an elapsed time:
myEL
# Expose the underlying data.table:
myEL$log

## Demo with inheritance of the class:
demo("objectInheritance", package="EventLogger", ask=FALSE)


}
